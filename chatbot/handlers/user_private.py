from aiogram import Router, types, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import CommandStart, Command, or_f, Filter
from aiogram.types import CallbackQuery, Message
import logging
import chatbot.keyboards as kb
from chatbot.keyboards import inline_tokens_kb, checktokens_message, cancel_btn
from chatbot.keyboards import Pagination
from main import users, users_tokens, bot, tokens
from config import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio


class Form(StatesGroup):
    start_broadcast = State()


async def broadcast_message(users_data: list, text: str = None, photo_id: int = None, document_id: int = None,
                            video_id: int = None, audio_id: int = None, caption: str = None, content_type: str = None):
    good_send = 0
    bad_send = 0
    for user in users_data:
        try:
            chat_id = user
            if content_type == ContentType.TEXT:
                await bot.send_message(chat_id=chat_id, text=text)
            elif content_type == ContentType.PHOTO:
                await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption)
            elif content_type == ContentType.DOCUMENT:
                await bot.send_document(chat_id=chat_id, document=document_id, caption=caption)
            elif content_type == ContentType.VIDEO:
                await bot.send_video(chat_id=chat_id, video=video_id, caption=caption)
            elif content_type == ContentType.AUDIO:
                await bot.send_audio(chat_id=chat_id, audio=audio_id, caption=caption)
            good_send += 1
        except Exception as e:
            print(e, 'ba')
            bad_send += 1
        finally:
            await asyncio.sleep(1)
    return good_send, bad_send


# –ü–æ—Å—Ç img, tiker
async def rsi_signal(data):
    tasks = []
    for item in data:
        tiker = item[0][:-4]
        print(tiker)
        token_UID = tokens.get_token_ID(item[0])
        # token_UID = '1'
        print('jopa3')
        s = f'https://www.bybit.com/ru-RU/trade/spot/{tiker}/USDT'
        # –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        users_id_list = users_tokens.get_users_by_token(int(token_UID))

        print('priiiiveeeet')
        # for user in users_id:
        #     bot.send_message(chat_id=user,
        #                      text=f'–ó–∞–Ω–æ—Å–∏–∫, –ø–æ–∫—É–ø–∞–π –∑–¥–µ—Å—å: https://www.bybit.com/ru-RU/trade/spot/{tiker[:-4]}/USDT')
        tasks += [bot.send_message(chat_id=user, text=f'–ó–∞–Ω–æ—Å–∏–∫, –ø–æ–∫—É–ø–∞–π –∑–¥–µ—Å—å: https://www.bybit.com/ru-RU/trade/spot/{tiker}/USDT') for user in users_id_list]
    await asyncio.gather(*tasks)

        # for user in users_id_list:
        #     print(user['UID'])
        #     bot.send_message(
        #         chat_id=user['UID'],
        #         text=f'–ó–∞–Ω–æ—Å–∏–∫, –ø–æ–∫—É–ø–∞–π –∑–¥–µ—Å—å: https://www.bybit.com/ru-RU/trade/spot/{tiker[:-4]}/USDT',
        #     )

        # print(users_id_list)
        # print(tiker)
        # good_send, bad_send = await broadcast_message(
        #     users_data=users_id,
        #     text=f'–ó–∞–Ω–æ—Å–∏–∫, –ø–æ–∫—É–ø–∞–π –∑–¥–µ—Å—å: https://www.bybit.com/ru-RU/trade/spot/{tiker[:-4]}/USDT',
        #     # photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        #     # document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        #     # video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        #     # audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        #     # caption=message.caption,
        #     # content_type=content_type
        # )

# TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤

# –õ–æ–≥–∏-–±–æ—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

user_private_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
    userID = message.from_user.id # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if users.check_user_existence(user_UID=userID) == True:
        await message.answer(
            text = "–ü—Ä–∏–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup = kb.start
        )
    else:
        await message.answer(
            text = "–í—ã —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup = await kb.inline_main_kb(userID)
        )


@user_private_router.message(F.text == '/menu')
async def main_menu_cmd(message: Message):
    userID = message.from_user.id
    if users.check_user_existence(user_UID=userID) == False:
        await message.answer(
            text = "<b>–ú–µ–Ω—é –±–æ—Ç–∞ ü§ñ</b>",
            reply_markup = await kb.inline_main_kb(userID),
            parse_mode = ParseMode.HTML
        )
    else:
        await message.answer(
            text= "–°–ø–µ—Ä–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=kb.start
        )


@user_private_router.callback_query(F.data.startswith('crypto_menu'))
async def crypto_menu_cmd(callback: CallbackQuery):
    userID = callback.from_user.id
    if users.check_user_existence(user_UID=userID) == False:
        await callback.message.answer(
            text = "<b>–ú–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>",
            reply_markup = await kb.inline_tokens_kb(userID=userID),
            parse_mode = ParseMode.HTML
        )
        # -1 –ó–∞–ø—Ä–æ—Å –≤ limit
        # users.dec_user_limit(userId)
    else:
        await callback.message.answer(
            text= "–°–ø–µ—Ä–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=kb.start
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
@user_private_router.callback_query(F.data.startswith('back_to_menu'))
async def back_to_menu_kb(callback: CallbackQuery):
    userID = callback.from_user.id

    await callback.message.edit_text(text='<b>–ú–µ–Ω—é –±–æ—Ç–∞ ü§ñ</b>', reply_markup = await kb.inline_main_kb(userID), parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@user_private_router.callback_query(F.data.startswith('help'))
async def help_cmd(callback: CallbackQuery):
    userID = callback.from_user.id
    await callback.message.edit_text(text='<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ</b> üëæ', parse_mode=ParseMode.HTML, reply_markup= await kb.help_kb_init(userID))
    # await callback.message.answer(
    #     text = '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ',
    #     reply_markup=kb.help
    # )


@user_private_router.message(F.text == '/help')
async def help_message_cmd(message: Message):
    userID = message.from_user.id
    await message.answer(text='<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ</b> üëæ', parse_mode=ParseMode.HTML, reply_markup= await kb.help_kb_init(userID))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /checktokens
@user_private_router.callback_query(F.data.startswith('checktokens'))
async def checktokens_cmd(callback: CallbackQuery):
    userID = callback.from_user.id
    if users.check_user_existence(user_UID=userID) == False:
        await callback.message.answer(
            text=await checktokens_message(userID=userID)
        )
    else:
        await callback.message.answer(
            text= "–°–ø–µ—Ä–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=kb.start
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@user_private_router.callback_query(F.data == 'agreement')
async def users_agreement(callback: CallbackQuery):
    userID = callback.from_user.id
    await callback.message.answer(
        text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!üçÄ',
        reply_markup=await kb.inline_main_kb(userID)
        )
    users.add_user(user_UID=userID)


@user_private_router.callback_query(F.data.startswith('token_subscription:'))
async def token_subscription(callback: CallbackQuery):
    userID = callback.from_user.id
    tokenID = int(callback.data.split(':')[-2])

    users.dec_user_limit(userID)

    user_tokens = users_tokens.get_tokens_by_user(userID)

    # TODO: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É/–æ—Ç–ø–∏—Å–∫—É

    # print(tokenID, user_tokens)

    current_page = int(callback.data.split(':')[-1])
    if tokenID in user_tokens:
        users_tokens.remove_token_for_user(user_UID=userID, token_ID=tokenID)
    else:
        users_tokens.add_token_for_user(user_UID=userID, token_ID=tokenID)

    await callback.message.edit_reply_markup(reply_markup=await kb.inline_tokens_kb(userID=userID,page=current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@user_private_router.callback_query(Pagination.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    userID = call.from_user.id
    await call.message.edit_reply_markup(reply_markup=await inline_tokens_kb(userID=userID ,page=page))  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ "–≤–ø–µ—Ä–µ–¥" –∏–ª–∏ "–Ω–∞–∑–∞–¥"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@user_private_router.callback_query(or_f(F.data.startswith('admin'), (F.text.lower.startswith('–∫–∞—Å—Ç–æ–º–Ω—ã–π'))))
async def custom_message(callback: CallbackQuery, state: FSMContext):
    userID = callback.from_user.id

    if userID in admins_id:
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞üëæ',
                                      reply_markup=cancel_btn())
        await state.set_state(Form.start_broadcast)
    else:
        await callback.message.answer(
            text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤üòØ',
            reply_markup=await kb.inline_main_kb(userID)
        )


# TODO: –î–æ–±–∞–≤–∏—Ç—å alert –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ
@user_private_router.callback_query(F.data.startswith('tokens_unsubscribe'))
async def token_unsubscribe(callback: CallbackQuery):
    userID = callback.from_user.id
    user_tokens = users_tokens.get_tokens_by_user(userID)
    current_page = int(callback.data.split(":")[-1])

    for tokenID in user_tokens:
        users_tokens.remove_token_for_user(user_UID=userID, token_ID=tokenID)

    await callback.message.edit_reply_markup(reply_markup=await kb.inline_tokens_kb(userID=userID, page=current_page))


# –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
@user_private_router.message(F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}), Form.start_broadcast)
async def universe_broadcast(message: Message, state: FSMContext):
    userID = message.from_user.id
    users_id_list = users.select_all()
    users_id = [user['UID'] for user in users_id_list]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    content_type = message.content_type

    if content_type == ContentType.TEXT and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        await message.answer(text='<b>–ú–µ–Ω—é –±–æ—Ç–∞</b> ü§ñ', reply_markup = await kb.inline_main_kb(userID), parse_mode=ParseMode.HTML)
        return

    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_id)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    good_send, bad_send = await broadcast_message(
        users_data=users_id,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type
    )

    await state.clear()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ <b>{good_send}</b>, '
                         f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ <b>{bad_send}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=await kb.inline_main_kb(userID), parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_private_router.message()
async def answer(message: types.Message):
    userID = message.from_user.id
    userName = message.from_user.first_name
    await message.answer(
        text=f'–ò–∑–≤–∏–Ω–∏—Ç–µ, <b>{userName}</b>, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –º–µ–Ω—é.',
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        text='<strong>–ú–µ–Ω—é –±–æ—Ç–∞</strong> ü§ñ',
        reply_markup=await kb.inline_main_kb(userID),
        parse_mode=ParseMode.HTML
    )
