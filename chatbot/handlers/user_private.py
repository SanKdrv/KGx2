from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, or_f, Filter
from aiogram.types import CallbackQuery, Message
import logging
import chatbot.keyboards as kb
from chatbot.keyboards import inline_tokens_kb, checktokens_message
from chatbot.keyboards import Pagination
from main import users, users_tokens
from main import tokens as db_tokens


# –õ–æ–≥–∏-–±–æ—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

user_private_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
    userId = message.from_user.id # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if users.check_user_existence(user_UID=userId) == True:
        await message.answer(
            text = "–ü—Ä–∏–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=kb.start
        )
    else:
        await message.answer(
            text = "–í—ã —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup = kb.main_kb
        )


@user_private_router.message(or_f(Command('menu'), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    userId = message.from_user.id
    if users.check_user_existence(user_UID=userId) == False:
        await message.answer(
            text = "–ú–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
            reply_markup = await kb.inline_tokens_kb(userID=userId)
        )
        # -1 –ó–∞–ø—Ä–æ—Å –≤ limit
        # users.dec_user_limit(userId)
    else:
        await message.answer(
            text= "–°–ø–µ—Ä–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=kb.start
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@user_private_router.message(or_f(Command('help'), (F.text.lower() == "–æ –±–æ—Ç–µ")))
async def help_cmd(message: types.Message):
    await message.answer(
        text = '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ',
        reply_markup=kb.help
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /checktokens
@user_private_router.message(or_f(Command('checktokens'), (F.text.lower() == '–ø–æ–¥–ø–∏—Å–∫–∏')))
async def checktokens_cmd(message: types.Message):
    userId = message.from_user.id
    if users.check_user_existence(user_UID=userId) == False:
        await message.answer(
            text=await checktokens_message(userID=userId)
        )
    else:
        await message.answer(
            text= "–°–ø–µ—Ä–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=kb.start
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@user_private_router.callback_query(F.data == 'agreement')
async def users_agreement(callback: CallbackQuery):
    userId = callback.from_user.id
    await callback.message.answer(
        text='–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!üçÄ',
        reply_markup=kb.main_kb
        )
    users.add_user(user_UID=userId)


@user_private_router.callback_query(F.data.startswith('token_subscription:'))
async def token_subscription(callback: CallbackQuery):
    userID = callback.from_user.id
    tokenID = int(callback.data.split(':')[-2])

    user_tokens = users_tokens.get_tokens_by_user(userID)

    print(tokenID, user_tokens)

    current_page = int(callback.data.split(':')[-1])
    if tokenID in user_tokens:
        users_tokens.remove_token_for_user(user_UID=userID, token_ID=tokenID)
    else:
        users_tokens.add_token_for_user(user_UID=userID, token_ID=tokenID)

    await callback.message.edit_reply_markup(reply_markup=await kb.inline_tokens_kb(userID=userID,page=current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@user_private_router.callback_query(Pagination.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    userID = call.from_user.id
    await call.message.edit_reply_markup(reply_markup=await inline_tokens_kb(userID=userID ,page=page))  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ "–≤–ø–µ—Ä–µ–¥" –∏–ª–∏ "–Ω–∞–∑–∞–¥"


@user_private_router.callback_query(F.data.startswith('tokens_unsubscribe'))
async def token_unsubscribe(callback: CallbackQuery):
    userID = callback.from_user.id
    user_tokens = users_tokens.get_tokens_by_user(userID)
    current_page = int(callback.data.split(":")[-1])

    for tokenID in user_tokens:
        users_tokens.remove_token_for_user(user_UID=userID, token_ID=tokenID)

    await callback.message.edit_reply_markup(reply_markup=await kb.inline_tokens_kb(userID=userID, page=current_page))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

